pipeline {
    agent any

    environment {
        registryCredentials = "nexus"
        registry = "192.168.56.10:8083"
        DOCKER_BUILDKIT = "1"  // Enable Docker BuildKit for faster builds
    }
   
    stages {
        stage('Install dependencies') {
            steps {
                script {
                    sh('npm install')
                }
            }
        }

        stage('Unit Test') {
            steps {
                script {
                    sh('npm test')
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {  
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                } 
            }  
        }

        stage('Building images') {
            steps {
                script {
                    // Use Docker Compose v2 syntax
                    sh 'docker compose build --no-cache'
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {  
                script {
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        sh "docker push ${registry}/nodemongoapp:6.0"
                    }
                }
            }
        }

        stage('Run application') {
            steps {  
                script {
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        sh "docker pull ${registry}/nodemongoapp:6.0"
                        // Use Docker Compose v2 syntax
                        sh 'docker compose up -d'
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Verify kubectl is configured
                    sh 'kubectl cluster-info'
                    
                    // Apply configurations with retry logic
                    retry(3) {
                        sh 'kubectl apply -f k8s/deployment.yaml'
                        sh 'kubectl apply -f k8s/service.yaml'
                    }
                    
                    // Verify deployment with timeout
                    timeout(time: 5, unit: 'MINUTES') {
                        sh 'kubectl rollout status deployment/nodeapp-deployment'
                    }
                    
                    // Get service URL
                    sh '''
                        echo "Application URL:"
                        minikube service nodeapp-service --url
                    '''
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker resources
            sh 'docker compose down || true'
            sh 'docker system prune -f || true'
        }
        failure {
            // Send notification on failure
            echo 'Pipeline failed!'
        }
    }
}